name: "Terraform CI/CD Pipeline"

on:
  workflow_dispatch:  # Allows manual trigger
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    env:  
      # Azure provider environment variables
      ARM_CLIENT_ID: ${{ secrets.TF_VAR_agent_client_id }}
      ARM_CLIENT_SECRET: ${{ secrets.TF_VAR_agent_client_secret }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.TF_VAR_subscription_id }}
      ARM_TENANT_ID: ${{ secrets.TF_VAR_tenant_id }}
      # Terraform input variables
      TF_VAR_agent_client_id: ${{ secrets.TF_VAR_agent_client_id }}
      TF_VAR_agent_client_secret: ${{ secrets.TF_VAR_agent_client_secret }}
      TF_VAR_subscription_id: ${{ secrets.TF_VAR_subscription_id }}
      TF_VAR_tenant_id: ${{ secrets.TF_VAR_tenant_id }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Run TFSec Security Scan
        uses: aquasecurity/tfsec-action@v2

      - name: Terraform Plan
        run: terraform plan -out=tfplan -no-color

      - name: Terraform Apply on Test Environment
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy on Test Environment
        if: always()
        run: terraform destroy -auto-approve

      - name: Run Terratest (if configured)
        run: go test -v -timeout 30m ./test/
